open! Ppx_effects_runtime.Import
type _ Ppx_effects_runtime.t +=  
  | E: string Ppx_effects_runtime.t 
let comp () = print_string "0 "; print_string (perform E); print_string "3 "
let () =
  Ppx_effects_runtime.Deep.try_with comp ()
    {
      Ppx_effects_runtime.Deep.effc =
        (let effc (type continue_input) =
           (let open! Ppx_effects_runtime.Deep.Open_on_rhs in
              function
              | E ->
                  Some
                    ((fun k ->
                        print_string "1 "; continue k "2 "; print_string "4 "))
              | _ -> None : continue_input Ppx_effects_runtime.t ->
                              ((continue_input, _)
                                 Ppx_effects_runtime.Deep.continuation -> 
                                 _)
                                option) in
         effc)
    }
let () =
  Ppx_effects_runtime.Deep.match_with comp ()
    {
      Ppx_effects_runtime.Deep.retc = (function | e -> e);
      exnc = Ppx_effects_runtime.raise;
      effc =
        (let effc (type continue_input) =
           (let open! Ppx_effects_runtime.Deep.Open_on_rhs in
              function
              | E ->
                  Some
                    ((fun k ->
                        print_string "1 "; continue k "2 "; print_string "4 "))
              | _ -> None : continue_input Ppx_effects_runtime.t ->
                              ((continue_input, _)
                                 Ppx_effects_runtime.Deep.continuation -> 
                                 _)
                                option) in
         effc)
    }
